{"0": {
    "doc": "Agent actions",
    "title": "Agent actions",
    "content": "Actions can be specified to interact with cells at different points of the simulation. &lt;set&gt; &lt;!-- Simulation set --&gt; &lt;series&gt; &lt;!-- Simulation series --&gt; &lt;patch&gt; &lt;!-- Patch implementation setup --&gt; &lt;/patch&gt; &lt;potts&gt; &lt;!-- Potts implementation setup --&gt; &lt;/potts&gt; &lt;populations&gt; &lt;!-- Setup for agent populations --&gt; &lt;/populations&gt; . &lt;actions&gt; &lt;!-- Setup for agent actions --&gt; &lt;/actions&gt; . &lt;layers&gt; &lt;!-- Setup for environment layers --&gt; &lt;/layers&gt; &lt;components&gt; &lt;!-- Setup for environment components --&gt; &lt;/components&gt; &lt;/series&gt; &lt;/set&gt; . ",
    "url": "/ARCADE/setup/agent_actions.html",
    
    "relUrl": "/setup/agent_actions.html"
  },"1": {
    "doc": "Patch agent actions",
    "title": "Patch agent actions",
    "content": " ",
    "url": "/ARCADE/setup/agent_actions_patch.html",
    
    "relUrl": "/setup/agent_actions_patch.html"
  },"2": {
    "doc": "Patch agent actions",
    "title": "Table of Contents",
    "content": ". | Action creation . | Example: Initializing one agent action | Example: Initializing two agent actions | . | Action parameters . | Example: Modifying action parameters | . | Registration to populations . | Example: Registering one population to an action | Example: Registering two populations to an action | . | . The action tag defines a single action. Nested tags include action.parameter for parameters and action.register for registration to a population. &lt;actions&gt; &lt;action id=\"[ID]\" class=\"[CLASS]\"&gt; &lt;action.parameter id=\"[ID]\" value=\"[VALUE]\" scale=\"[SCALE]\" /&gt; &lt;action.register id=\"[ID]\" /&gt; ... &lt;/action&gt; ... &lt;/actions&gt; . ",
    "url": "/ARCADE/setup/agent_actions_patch.html#table-of-contents",
    
    "relUrl": "/setup/agent_actions_patch.html#table-of-contents"
  },"3": {
    "doc": "Patch agent actions",
    "title": "Action creation",
    "content": "The action tag attributes are used to create an action. | Each action must have a unique id | Each action must specify a class | . Valid options for classes include: . insert Inserts cell agents into the simulation remove Remove cell agents from the simulation convert Converts cell agents to a different population | ATTRIBUTE | DESCRIPTION | TYPE | REQUIRED | . | id | unique name for the action | string | Y | . | class | action class option | string | Y | . Example: Initializing one agent action . Specifies an agent action, A, with the insert action class. &lt;actions&gt; &lt;action id=\"A\" class=\"insert\" /&gt; &lt;/actions&gt; . Example: Initializing two agent actions . Specifies two agent actions, A and B. Action A uses the insert action class, and action B uses the convert action class. &lt;actions&gt; &lt;action id=\"A\" class=\"insert\" /&gt; &lt;action id=\"B\" class=\"convert\" /&gt; &lt;/actions&gt; . ",
    "url": "/ARCADE/setup/agent_actions_patch.html#action-creation",
    
    "relUrl": "/setup/agent_actions_patch.html#action-creation"
  },"4": {
    "doc": "Patch agent actions",
    "title": "Action parameters",
    "content": "The action.parameter tag defines action parameters. Unless modified, default values are used for all parameters. Defaults are listed in parameter.patch.xml. | Either or both value and scale attributes can be applied, with value applied first | Only numeric parameters can be modified using scale | . | ATTRIBUTE | DESCRIPTION | . | id | parameter name | . | value | new parameter value | . | scale | scaling factor applied to parameter value | . Example: Modifying action parameters . The insert radius parameter is set to the new value 2000. &lt;action.parameter id=\"INSERT_RADIUS\" value=\"2000\" /&gt; . The default value of the insert radius parameter is scaled by 2. &lt;action.parameter id=\"INSERT_RADIUS\" scale=\"2\" /&gt; . The insert radius parameter is set to the new value 10 * 2 = 20. &lt;action.parameter id=\"INSERT_RADIUS\" value=\"10\" scale=\"2\" /&gt; . ",
    "url": "/ARCADE/setup/agent_actions_patch.html#action-parameters",
    
    "relUrl": "/setup/agent_actions_patch.html#action-parameters"
  },"5": {
    "doc": "Patch agent actions",
    "title": "Registration to populations",
    "content": "The action.register tag registers the action to a specific population. The registered population id must match a population defined in the cell population setup. Actions may or may not need to have registered populations, depending on the specific action class. For example, the remove action does not need a registered population while the insert action may be registered to multiple populations. | ATTRIBUTE | DESCRIPTION | . | id | population id | . Example: Registering one population to an action . The action is registered to population A. &lt;action.register id=\"A\" /&gt; . Example: Registering two populations to an action . The action is registered to population A and B. &lt;action.register id=\"A\" /&gt; &lt;action.register id=\"B\" /&gt; . ",
    "url": "/ARCADE/setup/agent_actions_patch.html#registration-to-populations",
    
    "relUrl": "/setup/agent_actions_patch.html#registration-to-populations"
  },"6": {
    "doc": "Potts agent actions",
    "title": "Potts agent actions",
    "content": "No actions are defined for the potts implementation. Using the action tag in a potts setup file will cause an error. ",
    "url": "/ARCADE/setup/agent_actions_potts.html",
    
    "relUrl": "/setup/agent_actions_potts.html"
  },"7": {
    "doc": "Cell populations",
    "title": "Cell populations",
    "content": "All cell agents are defined in populations. Cells in the same population share the same cell class and parameters. &lt;set&gt; &lt;!-- Simulation set --&gt; &lt;series&gt; &lt;!-- Simulation series --&gt; &lt;patch&gt; &lt;!-- Patch implementation setup --&gt; &lt;/patch&gt; &lt;potts&gt; &lt;!-- Potts implementation setup --&gt; &lt;/potts&gt; . &lt;populations&gt; &lt;!-- Setup for agent populations --&gt; &lt;/populations&gt; . &lt;actions&gt; &lt;!-- Setup for agent actions --&gt; &lt;/actions&gt; &lt;layers&gt; &lt;!-- Setup for environment layers --&gt; &lt;/layers&gt; &lt;components&gt; &lt;!-- Setup for environment components --&gt; &lt;/components&gt; &lt;/series&gt; &lt;/set&gt; . ",
    "url": "/ARCADE/setup/cell_populations.html",
    
    "relUrl": "/setup/cell_populations.html"
  },"8": {
    "doc": "Patch cell populations",
    "title": "Patch cell populations",
    "content": " ",
    "url": "/ARCADE/setup/cell_populations_patch.html",
    
    "relUrl": "/setup/cell_populations_patch.html"
  },"9": {
    "doc": "Patch cell populations",
    "title": "Table of Contents",
    "content": ". | Population initialization . | Example: Initializing different agent classes | Example: Initializing one agent population | Example: Initializing two agent populations | Example: Initializing single agent population with percentage | . | Population parameters . | Example: Modifying population parameters | Example: Modifying population parameters with distributions | Example: Modifying population module parameters | Example: Modifying population process parameters | . | Intracellular processes . | Example: Including process versions | . | Links between populations . | Example: Adding links with equal weights to other populations | Example: Adding links with unequal weights to other populations | . | . The population tag defines a single population. Nested tags include population.parameter for parameters, population.process for processes, and population.link for links. &lt;populations&gt; &lt;population id=\"[ID]\" class=\"[CLASS]\" init=\"[INIT]\"&gt; &lt;population.parameter id=\"[ID]\" value=\"[VALUE]\" scale=\"[SCALE]\" /&gt; &lt;population.parameter id=\"[ID]\" value=\"[VALUE]\" scale=\"[SCALE]\" module=\"[MODULE]\" /&gt; &lt;population.parameter id=\"[ID]\" value=\"[VALUE]\" scale=\"[SCALE]\" process=\"[PROCESS]\" /&gt; &lt;population.process id=\"[ID]\" version=\"[VERSION]\" /&gt; &lt;population.process id=\"[ID]\" version=\"[VERSION]\" /&gt; &lt;population.link id=\"[ID]\" weight=\"[WEIGHT]\" /&gt; ... &lt;/population&gt; ... &lt;/populations&gt; . ",
    "url": "/ARCADE/setup/cell_populations_patch.html#table-of-contents",
    
    "relUrl": "/setup/cell_populations_patch.html#table-of-contents"
  },"10": {
    "doc": "Patch cell populations",
    "title": "Population initialization",
    "content": "The population tag attributes are used to initialize the population. | Each population must have a unique id | For init, use N% to initialize with N percent of the total patches with cells | . Valid options for classes include: . tissue Healthy tissue cell cancer Cancerous tissue cell (inherits from tissue) cancer_stem Cancerous stem cells (inherits from cancer) random Cell with randomly assigned states. | ATTRIBUTE | DESCRIPTION | TYPE | DEFAULT | REQUIRED | . | id | unique name for the agent population | string | Â  | Y | . | class | population cell class | string | tissue | N | . | init | number of initial agents in population | integer | 0 | N | . Example: Initializing different agent classes . Specifies an agent population, A, with the tissue cell class. &lt;populations&gt; &lt;population id=\"A\" class=\"tissue\" /&gt; &lt;/populations&gt; . Example: Initializing one agent population . Specifies one agent population, A. Population A is initialized with 10 agents. &lt;populations&gt; &lt;population id=\"A\" init=\"10\" /&gt; &lt;/populations&gt; . Example: Initializing two agent populations . Specifies two agent populations, A and B. Population A is initialized with 10 agents, and population B is initialized with 5 agents. &lt;populations&gt; &lt;population id=\"A\" init=\"10\" /&gt; &lt;population id=\"B\" init=\"5\" /&gt; &lt;/populations&gt; . Example: Initializing single agent population with percentage . Specifies one agent population, A. Population A is in 50% of the total patches in the simulation. &lt;populations&gt; &lt;population id=\"A\" init=\"50%\" /&gt; &lt;/populations&gt; . ",
    "url": "/ARCADE/setup/cell_populations_patch.html#population-initialization",
    
    "relUrl": "/setup/cell_populations_patch.html#population-initialization"
  },"11": {
    "doc": "Patch cell populations",
    "title": "Population parameters",
    "content": "The population.parameter tag defines population parameters. Unless modified, default values are used for all parameters. Defaults are listed in parameter.patch.xml. | Either or both value and scale attributes can be applied, with value applied first | Only numeric parameters can be modified using scale | Changes for parameters specific to a module can be applied to using the module attribute | Changes for parameters specific to a process can be applied to using the process attribute | . | ATTRIBUTE | DESCRIPTION | . | id | parameter name | . | value | new parameter value | . | scale | scaling factor applied to parameter value | . | module | module the parameter belongs to | . | process | process the parameter belongs to | . Parameter values can be defined as distributions, rather than a single value, using the value=\"DISTRIBUTION_TYPE(PARAM=VALUE,...)\" syntax. Cells will draw from the parameter distribution for their population to set parameter values. Valid distributions include: . UNIFORM Uniform distribution between minimum value MIN and maximum value MAX NORMAL Normal distribution with mean MU and stdev SIGMA TRUNCATED_NORMAL Normal distribution with mean MU and stdev SIGMA truncated at Â± 2Ï FRACTIONAL_NORMAL Normal distribution with mean MU and stdev SIGMA bounded between 0 and 1 BERNOULLI Bernoulli distribution with probability of success PROBABILITY Example: Modifying population parameters . The critical volume parameter is set to the new value 2000. &lt;population.parameter id=\"CRITICAL_VOLUME\" value=\"2000\" /&gt; . The default value of the critical volume parameter is scaled by 2. &lt;population.parameter id=\"CRITICAL_VOLUME\" scale=\"2\" /&gt; . The critical volume parameter is set to the new value 1000 * 2 = 2000. &lt;population.parameter id=\"CRITICAL_VOLUME\" value=\"1000\" scale=\"2\" /&gt; . Example: Modifying population parameters with distributions . The critical volume parameter is drawn from a normal distribution with mean of 2000 and standard deviation of 100. &lt;population.parameter id=\"CRITICAL_VOLUME\" value=\"NORMAL(MU=2000,SIGMA=100)\" /&gt; . The critical volume parameter is drawn from uniform distribution between 1000 and 2000. &lt;population.parameter id=\"CRITICAL_VOLUME\" value=\"UNIFORM(MIN=1000,MAX=2000)\" /&gt; . Example: Modifying population module parameters . The cell growth rate parameter in the proliferation module is set to the new value 20. &lt;population.parameter id=\"CELL_GROWTH_RATE\" module=\"proliferation\" value=\"20\" /&gt; . Example: Modifying population process parameters . The ATP production rate parameter in the metabolism process is set to the new value 10. &lt;population.parameter id=\"ATP_PRODUCTION_RATE\" process=\"metabolism\" value=\"10\" /&gt; . ",
    "url": "/ARCADE/setup/cell_populations_patch.html#population-parameters",
    
    "relUrl": "/setup/cell_populations_patch.html#population-parameters"
  },"12": {
    "doc": "Patch cell populations",
    "title": "Intracellular processes",
    "content": "The population.process tag lists intracellular process versions for the population. If process versions are not specified, the random version for each process is used. Valid options include: . METABOLISM Process for cell metabolism (random, simple, medium, complex) SIGNALING Process for cell signaling (random, simple, medium, complex) | ATTRIBUTE | DESCRIPTION | . | id | process option id | . | version | process version | . To modify process parameters, use the population.parameter tag with the corresponding process attribute. Example: Including process versions . Specifies a population with complex metabolism and simple signaling processes. &lt;population.process id=\"METABOLISM\" version=\"complex\" /&gt; &lt;population.process id=\"SIGNALING\" version=\"simple\" /&gt; . ",
    "url": "/ARCADE/setup/cell_populations_patch.html#intracellular-processes",
    
    "relUrl": "/setup/cell_populations_patch.html#intracellular-processes"
  },"13": {
    "doc": "Patch cell populations",
    "title": "Links between populations",
    "content": "The population.link tag defines links between populations. These links define transitions between populations during cell division. If not defined, the default behavior is to produce a daughter cell in the same population as the mother cell. | ATTRIBUTE | DESCRIPTION | . | id | linked population id | . | weight | relative probability weighting | . Example: Adding links with equal weights to other populations . Specifies links to populations A and B. When a cell in this population divides, the daughter cell has a 50% chance of being in population B and a 50% chance of being in population C. &lt;population.link id=\"A\" weight=\"1\" /&gt; &lt;population.link id=\"B\" weight=\"1\" /&gt; . Note that this specification is equivalent to: . &lt;population.link id=\"A\" weight=\"50\" /&gt; &lt;population.link id=\"B\" weight=\"50\" /&gt; . Example: Adding links with unequal weights to other populations . Specifies links to populations A, B, and C. When a cell in this population divides, the daughter cell has a 20% chance of being in population A, a 30% change of being in population B, and a 50% chance of being in population C. &lt;population.link id=\"A\" weight=\"20\" /&gt; &lt;population.link id=\"B\" weight=\"30\" /&gt; &lt;population.link id=\"C\" weight=\"50\" /&gt; . ",
    "url": "/ARCADE/setup/cell_populations_patch.html#links-between-populations",
    
    "relUrl": "/setup/cell_populations_patch.html#links-between-populations"
  },"14": {
    "doc": "Potts cell populations",
    "title": "Potts cell populations",
    "content": " ",
    "url": "/ARCADE/setup/cell_populations_potts.html",
    
    "relUrl": "/setup/cell_populations_potts.html"
  },"15": {
    "doc": "Potts cell populations",
    "title": "Table of Contents",
    "content": ". | Population initialization . | Example: Initializing different agent classes | Example: Initializing one agent population | Example: Initializing two agent populations | Example: Initializing single agent population with padding between cells | . | Population parameters . | Example: Modifying population parameters | Example: Modifying population parameters with distributions | Example: Modifying population module parameters | . | Subcellular regions . | Example: Including cell and nuclear regions | . | Links between populations . | Example: Adding links with equal weights to other populations | Example: Adding links with unequal weights to other populations | . | . The population tag defines a single population. Nested tags include population.parameter for parameters, population.region for regions, and population.link for links. &lt;populations&gt; &lt;population id=\"[ID]\" class=\"[CLASS]\" init=\"[INIT]\"&gt; &lt;population.parameter id=\"[ID]\" value=\"[VALUE]\" scale=\"[SCALE]\" /&gt; &lt;population.parameter id=\"[ID]\" value=\"[VALUE]\" scale=\"[SCALE]\" module=\"[MODULE]\" /&gt; &lt;population.region id=\"[ID]\" /&gt; &lt;population.link id=\"[ID]\" weight=\"[WEIGHT]\" /&gt; ... &lt;/population&gt; ... &lt;/populations&gt; . ",
    "url": "/ARCADE/setup/cell_populations_potts.html#table-of-contents",
    
    "relUrl": "/setup/cell_populations_potts.html#table-of-contents"
  },"16": {
    "doc": "Potts cell populations",
    "title": "Population initialization",
    "content": "The population tag attributes are used to initialize the population. | Each population must have a unique id | For init, use N:M to initialize N cells with M voxels of padding between cells | . Valid options for classes include: . stem Basic stem cell | ATTRIBUTE | DESCRIPTION | TYPE | DEFAULT | REQUIRED | . | id | unique name for the agent population | string | Â  | Y | . | class | population cell class | string | stem | N | . | init | number of initial agents in population | integer | 0 | N | . Example: Initializing different agent classes . Specifies an agent population, A, with the stem cell class. &lt;populations&gt; &lt;population id=\"A\" class=\"stem\" /&gt; &lt;/populations&gt; . Example: Initializing one agent population . Specifies one agent population, A. Population A is initialized with 10 agents. &lt;populations&gt; &lt;population id=\"A\" init=\"10\" /&gt; &lt;/populations&gt; . Example: Initializing two agent populations . Specifies two agent populations, A and B. Population A is initialized with 10 agents, and population B is initialized with 5 agents. &lt;populations&gt; &lt;population id=\"A\" init=\"10\" /&gt; &lt;population id=\"B\" init=\"5\" /&gt; &lt;/populations&gt; . Example: Initializing single agent population with padding between cells . Specifies one agent population, A. Population A is initialized with 10 agents, with 3 voxels of padding between cells. &lt;populations&gt; &lt;population id=\"A\" init=\"10:3\" /&gt; &lt;/populations&gt; . ",
    "url": "/ARCADE/setup/cell_populations_potts.html#population-initialization",
    
    "relUrl": "/setup/cell_populations_potts.html#population-initialization"
  },"17": {
    "doc": "Potts cell populations",
    "title": "Population parameters",
    "content": "The population.parameter tag defines population parameters. Unless modified, default values are used for all parameters. Defaults are listed in parameter.potts.xml. | Either or both value and scale attributes can be applied, with value applied first | Only numeric parameters can be modified using scale | Changes for parameters specific to a module can be applied to using the module attribute | . | ATTRIBUTE | DESCRIPTION | . | id | parameter name | . | value | new parameter value | . | scale | scaling factor applied to parameter value | . | module | module the parameter belongs to | . Parameter values can be defined as distributions, rather than a single value, using the value=\"DISTRIBUTION_TYPE(PARAM=VALUE,...)\" syntax. Cells will draw from the parameter distribution for their population to set parameter values. Valid distributions include: . UNIFORM Uniform distribution between minimum value MIN and maximum value MAX NORMAL Normal distribution with mean MU and stdev SIGMA TRUNCATED_NORMAL Normal distribution with mean MU and stdev SIGMA truncated at Â± 2Ï FRACTIONAL_NORMAL Normal distribution with mean MU and stdev SIGMA bounded between 0 and 1 BERNOULLI Bernoulli distribution with probability of success PROBABILITY Example: Modifying population parameters . The critical volume parameter is set to the new value 2000. &lt;population.parameter id=\"CRITICAL_VOLUME\" value=\"2000\" /&gt; . The default value of the critical volume parameter is scaled by 2. &lt;population.parameter id=\"CRITICAL_VOLUME\" scale=\"2\" /&gt; . The critical volume parameter is set to the new value 1000 * 2 = 2000. &lt;population.parameter id=\"CRITICAL_VOLUME\" value=\"1000\" scale=\"2\" /&gt; . Example: Modifying population parameters with distributions . The critical volume parameter is drawn from a normal distribution with mean of 2000 and standard deviation of 100. &lt;population.parameter id=\"CRITICAL_VOLUME\" value=\"NORMAL(MU=2000,SIGMA=100)\" /&gt; . The critical volume parameter is drawn from uniform distribution between 1000 and 2000. &lt;population.parameter id=\"CRITICAL_VOLUME\" value=\"UNIFORM(MIN=1000,MAX=2000)\" /&gt; . Example: Modifying population module parameters . The cell growth rate parameter in the proliferation module is set to the new value 20. &lt;population.parameter id=\"CELL_GROWTH_RATE\" module=\"proliferation\" value=\"20\" /&gt; . ",
    "url": "/ARCADE/setup/cell_populations_potts.html#population-parameters",
    
    "relUrl": "/setup/cell_populations_potts.html#population-parameters"
  },"18": {
    "doc": "Potts cell populations",
    "title": "Subcellular regions",
    "content": "The population.region tag lists subcellular regions for the population. If regions are not specified, only the DEFAULT region is used. Valid options include: . DEFAULT Region representing the entire cell NUCLEUS Region representing the nucleus | ATTRIBUTE | DESCRIPTION | . | id | region option id | . Example: Including cell and nuclear regions . Specifies a population with both default and nuclear regions. &lt;population.region id=\"DEFAULT\" /&gt; &lt;population.region id=\"NUCLEUS\" /&gt; . ",
    "url": "/ARCADE/setup/cell_populations_potts.html#subcellular-regions",
    
    "relUrl": "/setup/cell_populations_potts.html#subcellular-regions"
  },"19": {
    "doc": "Potts cell populations",
    "title": "Links between populations",
    "content": "The population.link tag defines links between populations. These links define transitions between populations during cell division. If not defined, the default behavior is to produce a daughter cell in the same population as the mother cell. | ATTRIBUTE | DESCRIPTION | . | id | linked population id | . | weight | relative probability weighting | . Example: Adding links with equal weights to other populations . Specifies links to populations A and B. When a cell in this population divides, the daughter cell has a 50% chance of being in population B and a 50% chance of being in population C. &lt;population.link id=\"A\" weight=\"1\" /&gt; &lt;population.link id=\"B\" weight=\"1\" /&gt; . Note that this specification is equivalent to: . &lt;population.link id=\"A\" weight=\"50\" /&gt; &lt;population.link id=\"B\" weight=\"50\" /&gt; . Example: Adding links with unequal weights to other populations . Specifies links to populations A, B, and C. When a cell in this population divides, the daughter cell has a 20% chance of being in population A, a 30% change of being in population B, and a 50% chance of being in population C. &lt;population.link id=\"A\" weight=\"20\" /&gt; &lt;population.link id=\"B\" weight=\"30\" /&gt; &lt;population.link id=\"C\" weight=\"50\" /&gt; . ",
    "url": "/ARCADE/setup/cell_populations_potts.html#links-between-populations",
    
    "relUrl": "/setup/cell_populations_potts.html#links-between-populations"
  },"20": {
    "doc": "Changelog",
    "title": "Changelog",
    "content": " ",
    "url": "/ARCADE/changelog.html",
    
    "relUrl": "/changelog.html"
  },"21": {
    "doc": "Changelog",
    "title": "v3.3.0 - 2024-12-16",
    "content": "Compare with v3.2.0 . Features . | Add getString method to Parameters class by @Jannetty in #115 | Update minibox filter function to support multiple tag separators by @Jannetty in #112 | . Features: patch . | Implement cell cycle length tracking by @pohaoc2 in #97 | Add apoptosis age to induce change to apoptotic state by @cainja in #114 | . Features: potts . | Add rotateVectorAroundAxis function to Plane class with tests by @Jannetty in #117 | . Documentation . | Add publication abstracts to docs by @jessicasyu in #118 | Add emulation paper to publications by @cainja in #124 | Add setup file documentation by @jessicasyu in #119 | . Admin . | Bump action versions and update docs workflow trigger by @jessicasyu in #129 | . ",
    "url": "/ARCADE/changelog.html#v330---2024-12-16",
    
    "relUrl": "/changelog.html#v330---2024-12-16"
  },"22": {
    "doc": "Changelog",
    "title": "v3.2.0 - 2024-11-18",
    "content": "Compare with v3.1.4 . Features . | Update cell make method to return container by @jessicasyu in #74 | Update cell constructors to use container by @jessicasyu in #75 | Add support for linked populations in setup file by @jessicasyu in #76 | Add support for parameter distributions by @jessicasyu in #85 | . Features: patch . | Add support for initialization by percentage by @jessicasyu in #53 | Add patch cell agent with random state rules by @jessicasyu in #56 | Add support for different patch initialization schemes by @jessicasyu in #81 | Pass initial glucose concentration as parameter for metabolism modules by @allison-li-1016 in #96 | . Features: potts . | Added class key for potts populations by @Jannetty in #11 | Make necessary PottsCell fields public, prepare for abstract setModule() function by @Jannetty in #12 | Convert PottsCell to abstract class by @Jannetty in #13 | Add support for splits with offset, direction, and split probability by @Jannetty in #16 | Add custom plane splitvoxels by @Jannetty in #46 | Refactor plane constructor to take Double3D instead of Int3D by @Jannetty in #83 | . Bug fixes . | Remove apoptosis checkpoint for potts cells by @jessicasyu in #18 | Replace instance of wildcard import of Module to prevent clash in Java 9 by @cainja in #65 | Fix passing in initial glucose as a parameter value by @allison-li-1016 in #99 | . Tests . | Remove unnecessary mocking in potts cell stem tests by @jessicasyu in #57 | Unit tests for core utilities Colors class by @cainja in #63 | Adding tests for core utilities Solver class by @cainja in #69 | Improved tests for core utilities Color class by @cainja in #73 | Adding tests for core utilities Graph class by @cainja in #64 | Adding tests for core utilities Parameter class by @cainja in #71 | . Admin . | Update workflows conditions for main and develop branches by @jessicasyu in #10 | Change source compatibility from 1.8 to 1.11 by @jessicasyu in #66 | Migrate to JUnit 5 by @jessicasyu in #67 | Add spotless autoformatter by @jessicasyu in #68 | Update workflows for changelog releases and Jekyll docs by @jessicasyu in #100 | . ",
    "url": "/ARCADE/changelog.html#v320---2024-11-18",
    
    "relUrl": "/changelog.html#v320---2024-11-18"
  },"23": {
    "doc": "Changelog",
    "title": "v3.1.4 - 2024-02-26",
    "content": "Compare with v3.1.3 . ",
    "url": "/ARCADE/changelog.html#v314---2024-02-26",
    
    "relUrl": "/changelog.html#v314---2024-02-26"
  },"24": {
    "doc": "Changelog",
    "title": "v3.1.3 - 2024-02-05",
    "content": "Compare with v3.1.2 . Features . | Add version to output files by @jessicasyu in #7 | . Bug fixes . | Swap voxel update order by @jessicasyu in #8 | . ",
    "url": "/ARCADE/changelog.html#v313---2024-02-05",
    
    "relUrl": "/changelog.html#v313---2024-02-05"
  },"25": {
    "doc": "Changelog",
    "title": "v3.1.2 - 2023-11-14",
    "content": "Compare with v3.1.1 . Features . | Convert core enums to use interfaces by @jessicasyu in #3 | Update minibox to load simple fractions by @jessicasyu in #5 | . Bug fixes . | Update size checkpoints in potts modules by @jessicasyu in #2 | . Tests . | Update region adhesion unit tests by @jessicasyu in #6 | . Admin . | Update version handling in gradle build by @jessicasyu in #4 | . ",
    "url": "/ARCADE/changelog.html#v312---2023-11-14",
    
    "relUrl": "/changelog.html#v312---2023-11-14"
  },"26": {
    "doc": "Changelog",
    "title": "v3.1.1 - 2023-10-03",
    "content": "Compare with v3.1.0 . ",
    "url": "/ARCADE/changelog.html#v311---2023-10-03",
    
    "relUrl": "/changelog.html#v311---2023-10-03"
  },"27": {
    "doc": "Changelog",
    "title": "v3.1.0 - 2023-03-01",
    "content": "Compare with v3.0.1 . ",
    "url": "/ARCADE/changelog.html#v310---2023-03-01",
    
    "relUrl": "/changelog.html#v310---2023-03-01"
  },"28": {
    "doc": "Changelog",
    "title": "v3.0.1 - 2023-10-03",
    "content": "Compare with v3.0.0 . ",
    "url": "/ARCADE/changelog.html#v301---2023-10-03",
    
    "relUrl": "/changelog.html#v301---2023-10-03"
  },"29": {
    "doc": "Changelog",
    "title": "v3.0.0 - 2023-01-31",
    "content": "Compare with v2.4 . ",
    "url": "/ARCADE/changelog.html#v300---2023-01-31",
    
    "relUrl": "/changelog.html#v300---2023-01-31"
  },"30": {
    "doc": "Environment components",
    "title": "Environment components",
    "content": "Components can be specified to interact with environment layers at different points of the simulation. &lt;set&gt; &lt;!-- Simulation set --&gt; &lt;series&gt; &lt;!-- Simulation series --&gt; &lt;patch&gt; &lt;!-- Patch implementation setup --&gt; &lt;/patch&gt; &lt;potts&gt; &lt;!-- Potts implementation setup --&gt; &lt;/potts&gt; &lt;populations&gt; &lt;!-- Setup for agent populations --&gt; &lt;/populations&gt; &lt;actions&gt; &lt;!-- Setup for agent actions --&gt; &lt;/actions&gt; &lt;layers&gt; &lt;!-- Setup for environment layers --&gt; &lt;/layers&gt; . &lt;components&gt; &lt;!-- Setup for environment components --&gt; &lt;/components&gt; . &lt;/series&gt; &lt;/set&gt; . ",
    "url": "/ARCADE/setup/environment_components.html",
    
    "relUrl": "/setup/environment_components.html"
  },"31": {
    "doc": "Patch environment components",
    "title": "Patch environment components",
    "content": " ",
    "url": "/ARCADE/setup/environment_components_patch.html",
    
    "relUrl": "/setup/environment_components_patch.html"
  },"32": {
    "doc": "Patch environment components",
    "title": "Table of Contents",
    "content": ". | Component creation . | Example: Initializing one environment component | Example: Initializing two environment components | . | Component parameters . | Example: Modifying component parameters | . | Registration to layers . | Example: Registering a component to a single layer | Example: Registering a component to multiple layers | . | . The component tag defines a single component. Nested tags include component.parameter for parameters and component.register for registration to a layer. &lt;components&gt; &lt;component id=\"[ID]\" class=\"[CLASS]\"&gt; &lt;component.parameter id=\"[ID]\" value=\"[VALUE]\" scale=\"[SCALE]\" /&gt; &lt;component.register id=\"[ID]\" /&gt; ... &lt;/component&gt; ... &lt;/components&gt; . ",
    "url": "/ARCADE/setup/environment_components_patch.html#table-of-contents",
    
    "relUrl": "/setup/environment_components_patch.html#table-of-contents"
  },"33": {
    "doc": "Patch environment components",
    "title": "Component creation",
    "content": "The component tag attributes are used to create the component. | Each component must have a unique id | Each component must specify a class | . Valid options for classes include: . source_sites Sites for generator based on source layout pattern_sites Sites for generator based on pattern layout graph_sites_simple Sites for generator based on graph layout with simple hemodynamics graph_sites_complex Sites for generator based on graph layout with complex hemodynamics pulse Component for pulsing source concentrations Requires source_sites component cycle Component for cycling source concentrations Requires source_sites component degrade Component for degrading graph sites Requires graph_sites_simple or graph_sites_complex component remodel Component for remodeling graph sites Requires graph_sites_simple or graph_sites_complex component | ATTRIBUTE | DESCRIPTION | TYPE | REQUIRED | . | id | unique name for the component | string | Y | . | class | component class option | string | Y | . Example: Initializing one environment component . Specifies an environment component, A, with the source sites component class. &lt;components&gt; &lt;component id=\"A\" class=\"source_sites\" /&gt; &lt;/components&gt; . Example: Initializing two environment components . Specifies two environment components, A and B. Component A uses the complex graph sites component class, and component B uses the remodeling component class. &lt;components&gt; &lt;component id=\"A\" class=\"graph_sites_complex\" /&gt; &lt;component id=\"B\" class=\"remodel\" /&gt; &lt;/components&gt; . ",
    "url": "/ARCADE/setup/environment_components_patch.html#component-creation",
    
    "relUrl": "/setup/environment_components_patch.html#component-creation"
  },"34": {
    "doc": "Patch environment components",
    "title": "Component parameters",
    "content": "The component.parameter tag defines component parameters. Unless modified, default values are used for all parameters. Defaults are listed in parameter.patch.xml. | Either or both value and scale attributes can be applied, with value applied first | Only numeric parameters can be modified using scale | . | ATTRIBUTE | DESCRIPTION | . | id | parameter name | . | value | new parameter value | . | scale | scaling factor applied to parameter value | . Example: Modifying component parameters . The degradation rate parameter is set to the new value 2000. &lt;component.parameter id=\"DEGRADATION_RATE\" value=\"2000\" /&gt; . The default value of the degradation rate parameter is scaled by 2. &lt;component.parameter id=\"DEGRADATION_RATE\" scale=\"2\" /&gt; . The degradation rate parameter is set to the new value 10 * 2 = 20. &lt;component.parameter id=\"DEGRADATION_RATE\" value=\"10\" scale=\"2\" /&gt; . ",
    "url": "/ARCADE/setup/environment_components_patch.html#component-parameters",
    
    "relUrl": "/setup/environment_components_patch.html#component-parameters"
  },"35": {
    "doc": "Patch environment components",
    "title": "Registration to layers",
    "content": "The component.register tag registers the component to a specific layer. A component may be registered to more than one layer. The registered layer id must match a layer defined in the lattice layer setup. | ATTRIBUTE | DESCRIPTION | . | id | layer id | . Example: Registering a component to a single layer . The component is registered to layer A. &lt;component.register id=\"A\" /&gt; . Example: Registering a component to multiple layers . The component is registered to layer A and layer B. &lt;component.register id=\"A\" /&gt; &lt;component.register id=\"B\" /&gt; . ",
    "url": "/ARCADE/setup/environment_components_patch.html#registration-to-layers",
    
    "relUrl": "/setup/environment_components_patch.html#registration-to-layers"
  },"36": {
    "doc": "Potts environment components",
    "title": "Potts agent actions",
    "content": "No components are defined for the potts implementation. Using the component tag in a potts setup file will cause an error. ",
    "url": "/ARCADE/setup/environment_components_potts.html#potts-agent-actions",
    
    "relUrl": "/setup/environment_components_potts.html#potts-agent-actions"
  },"37": {
    "doc": "Potts environment components",
    "title": "Potts environment components",
    "content": " ",
    "url": "/ARCADE/setup/environment_components_potts.html",
    
    "relUrl": "/setup/environment_components_potts.html"
  },"38": {
    "doc": "Implementation setup",
    "title": "Implementation setup",
    "content": "Each implementation uses a dedicated tag to define implementation-specific setup. ARCADE currently supports two implementations: patch and potts. Only one implementation tag should be used in the setup file; additional implementation tags will be ignored. &lt;set&gt; &lt;!-- Simulation set --&gt; &lt;series&gt; &lt;!-- Simulation series --&gt; . &lt;patch&gt; &lt;!-- Patch implementation setup --&gt; &lt;/patch&gt; &lt;potts&gt; &lt;!-- Potts implementation setup --&gt; &lt;/potts&gt; . &lt;populations&gt; &lt;!-- Setup for agent populations --&gt; &lt;/populations&gt; &lt;actions&gt; &lt;!-- Setup for agent actions --&gt; &lt;/actions&gt; &lt;layers&gt; &lt;!-- Setup for environment layers --&gt; &lt;/layers&gt; &lt;components&gt; &lt;!-- Setup for environment components --&gt; &lt;/components&gt; &lt;/series&gt; &lt;/set&gt; . ",
    "url": "/ARCADE/setup/implementation_setup.html",
    
    "relUrl": "/setup/implementation_setup.html"
  },"39": {
    "doc": "Patch implementation",
    "title": "Patch implementation setup",
    "content": " ",
    "url": "/ARCADE/setup/implementation_setup_patch.html#patch-implementation-setup",
    
    "relUrl": "/setup/implementation_setup_patch.html#patch-implementation-setup"
  },"40": {
    "doc": "Patch implementation",
    "title": "Table of Contents",
    "content": ". | Implementation parameters . | Example: Changing model geometry | Example: Changing model initialization strategy | . | . The patch tag describes patch framework-specific setup. Nested tags include patch.parameter for parameters. &lt;patch&gt; &lt;patch.parameter id=\"[ID]\" value=\"[VALUE]\" scale=\"[SCALE]\" /&gt; ... &lt;/patch&gt; . ",
    "url": "/ARCADE/setup/implementation_setup_patch.html#table-of-contents",
    
    "relUrl": "/setup/implementation_setup_patch.html#table-of-contents"
  },"41": {
    "doc": "Patch implementation",
    "title": "Implementation parameters",
    "content": "The patch.parameter tag defines patch implementation parameters. Unless modified, default values are used for all parameters. Defaults are listed in parameter.patch.xml. | Either or both value and scale attributes can be applied, with value applied first | Only numeric parameters can be modified using scale | . | ATTRIBUTE | DESCRIPTION | . | id | Parameter name | . | value | New parameter value | . | scale | Scaling factor applied to parameter value | . Example: Changing model geometry . Specifies a hexagonal model geometry. &lt;patch.parameter id=\"GEOMETRY\" value=\"hex\" /&gt; . Example: Changing model initialization strategy . Specifies the random initialization strategy. &lt;patch.parameter id=\"INITIALIZATION\" value=\"random\" /&gt; . ",
    "url": "/ARCADE/setup/implementation_setup_patch.html#implementation-parameters",
    
    "relUrl": "/setup/implementation_setup_patch.html#implementation-parameters"
  },"42": {
    "doc": "Patch implementation",
    "title": "Patch implementation",
    "content": " ",
    "url": "/ARCADE/setup/implementation_setup_patch.html",
    
    "relUrl": "/setup/implementation_setup_patch.html"
  },"43": {
    "doc": "Potts implementation",
    "title": "Potts implementation setup",
    "content": " ",
    "url": "/ARCADE/setup/implementation_setup_potts.html#potts-implementation-setup",
    
    "relUrl": "/setup/implementation_setup_potts.html#potts-implementation-setup"
  },"44": {
    "doc": "Potts implementation",
    "title": "Table of Contents",
    "content": ". | Hamiltonian terms . | Example: Including volume and adhesion Hamiltonian terms | . | Implementation parameters . | Example: Modifying global potts parameters | Example: Modifying term-specific potts parameters | Example: Modifying term-specific potts parameters with target | . | . The potts tag describes Cellular Potts Model (CPM) framework-specific setup. Nested tags include potts.term for Hamiltonian terms and potts.parameter for parameters. &lt;potts&gt; &lt;potts.term id=\"[ID]\" /&gt; &lt;potts.parameter id=\"[ID]\" value=\"[VALUE]\" scale=\"[SCALE]\" /&gt; &lt;potts.parameter id=\"[ID]\" value=\"[VALUE]\" scale=\"[SCALE]\" term=\"[TERM]\" /&gt; &lt;potts.parameter id=\"[ID]\" value=\"[VALUE]\" scale=\"[SCALE]\" term=\"[TERM]\" target=\"[TARGET]\" /&gt; ... &lt;/potts&gt; . ",
    "url": "/ARCADE/setup/implementation_setup_potts.html#table-of-contents",
    
    "relUrl": "/setup/implementation_setup_potts.html#table-of-contents"
  },"45": {
    "doc": "Potts implementation",
    "title": "Hamiltonian terms",
    "content": "The potts.term tag is used to specify the terms used in the CPM Hamiltonian. Valid options include: . volume Target area (2D) or volume (3D) constraint surface Target perimeter (2D) or surface area (3D) constraint height Target height constraint (3D only) adhesion Adhesion contact energy (2D and 3D) substrate Differential substrate adhesion contact energy (3D only) persistence Persistence energy (2D and 3D) To modify Hamiltonian term parameters, use the potts.parameter tag with the corresponding term attribute. Example: Including volume and adhesion Hamiltonian terms . Specifies a Hamiltonian with the volume and adhesion terms. &lt;potts.term id=\"volume\" /&gt; &lt;potts.term id=\"adhesion\" /&gt; . ",
    "url": "/ARCADE/setup/implementation_setup_potts.html#hamiltonian-terms",
    
    "relUrl": "/setup/implementation_setup_potts.html#hamiltonian-terms"
  },"46": {
    "doc": "Potts implementation",
    "title": "Implementation parameters",
    "content": "The potts.parameter tag defines CPM implementation parameters. Unless modified, default values are used for all parameters. Defaults are listed in parameter.potts.xml. | Either or both value and scale attributes can be applied, with value applied first | Only numeric parameters can be modified using scale | Parameter changes for terms can be applied to specific populations using the target attribute | . | ATTRIBUTE | DESCRIPTION | . | id | parameter name | . | value | new parameter value | . | scale | scaling factor applied to parameter value | . | term | Hamiltonian term the parameter applies to | . | target | target populations ids for the parameter | . Example: Modifying global potts parameters . The MCS parameter is set to the new value of 3. &lt;potts.parameter id=\"MCS\" value=\"3\" /&gt; . Example: Modifying term-specific potts parameters . The lambda parameter in the volume term is set to the new value of 20. &lt;potts.parameter term=\"volume\" id=\"LAMBDA\" value=\"20\" /&gt; . Example: Modifying term-specific potts parameters with target . The lambda parameter in the volume term is scaled by 2 for population A. &lt;potts.parameter term=\"volume\" id=\"LAMBDA\" scale=\"2\" target=\"A\" /&gt; . The adhesion between population A and population B is set to the new value of 20. &lt;potts.parameter term=\"adhesion\" id=\"ADHESION\" value=\"20\" target=\"A:B\" /&gt; . The adhesion between population A and the media (*) is set to the new value of 30. &lt;potts.parameter term=\"adhesion\" id=\"ADHESION\" value=\"30\" target=\"A:*\" /&gt; . ",
    "url": "/ARCADE/setup/implementation_setup_potts.html#implementation-parameters",
    
    "relUrl": "/setup/implementation_setup_potts.html#implementation-parameters"
  },"47": {
    "doc": "Potts implementation",
    "title": "Potts implementation",
    "content": " ",
    "url": "/ARCADE/setup/implementation_setup_potts.html",
    
    "relUrl": "/setup/implementation_setup_potts.html"
  },"48": {
    "doc": "Setup files",
    "title": "Setup files",
    "content": "ARCADE uses a setup file that describes the setup of the simulations, agents, and environment. The basic structure of the file is: . &lt;set&gt; &lt;!-- Simulation set --&gt; &lt;series&gt; &lt;!-- Simulation series --&gt; &lt;patch&gt; &lt;!-- Patch implementation setup --&gt; &lt;/patch&gt; &lt;potts&gt; &lt;!-- Potts implementation setup --&gt; &lt;/potts&gt; &lt;populations&gt; &lt;!-- Setup for agent populations --&gt; &lt;/populations&gt; &lt;actions&gt; &lt;!-- Setup for agent actions --&gt; &lt;/actions&gt; &lt;layers&gt; &lt;!-- Setup for environment layers --&gt; &lt;/layers&gt; &lt;components&gt; &lt;!-- Setup for environment components --&gt; &lt;/components&gt; &lt;/series&gt; &lt;/set&gt; . Note that the &lt;patch&gt; and &lt;potts&gt; tags are only used when running the corresponding implementation. Not all tags may be valid or available in all implementations; see specific docs for each tag for details. ",
    "url": "/ARCADE/setup/",
    
    "relUrl": "/setup/"
  },"49": {
    "doc": "Overview",
    "title": "ARCADE: Agent-based Representation of Cells And Dynamic Environments",
    "content": "ARCADE is a flexible, extensible, interface-based Java framework for agent-based modeling of biological systems. Get the latest release on GitHub . ARCADE is a lightweight agent-based modeling framework that uses the MASON library for multi-agent scheduling and simulation. Existing implementations of the core interfaces can be used to run simulations via highly configurable setup files. ARCADE currently has two major implementation: . | patch represents one or more agents in each environmental patch location | potts represents agents as a collection of connected voxels (Cellular Potts modeling) | . New implementations of these interfaces can be easily integrated with existing functionality to develop models for different biological systems or questions of interest. The ARCADE v3 patch implementation is actively under development and not yet at parity with ARCADE v2. You can track progress using the migration: v2 to v3 tag. ",
    "url": "/ARCADE/#arcade-agent-based-representation-of-cells-and-dynamic-environments",
    
    "relUrl": "/#arcade-agent-based-representation-of-cells-and-dynamic-environments"
  },"50": {
    "doc": "Overview",
    "title": "Whatâs new in v3.3.0 - 2024-12-16",
    "content": "Compare with v3.2.0 . Features . | Add getString method to Parameters class by @Jannetty in #115 | Update minibox filter function to support multiple tag separators by @Jannetty in #112 | . Features: patch . | Implement cell cycle length tracking by @pohaoc2 in #97 | Add apoptosis age to induce change to apoptotic state by @cainja in #114 | . Features: potts . | Add rotateVectorAroundAxis function to Plane class with tests by @Jannetty in #117 | . Documentation . | Add publication abstracts to docs by @jessicasyu in #118 | Add emulation paper to publications by @cainja in #124 | Add setup file documentation by @jessicasyu in #119 | . Admin . | Bump action versions and update docs workflow trigger by @jessicasyu in #129 | . ",
    "url": "/ARCADE/#whats-new-in-v330---2024-12-16",
    
    "relUrl": "/#whats-new-in-v330---2024-12-16"
  },"51": {
    "doc": "Overview",
    "title": "Getting started",
    "content": "Coming soon! . ",
    "url": "/ARCADE/#getting-started",
    
    "relUrl": "/#getting-started"
  },"52": {
    "doc": "Overview",
    "title": "About the project",
    "content": "ARCADE v2 is Â© 2020-2023 Bagheri Lab at Northwestern University. ARCADE v3 is Â© 2022-2025, Bagheri Lab at the University of Washington Seattle and Jessica S. Yu at the Allen Institute for Cell Science. License . ARCADE v2 is distributed under a GPL 3 license. ARCADE v3 is distributed under a BSD 3-Clause license. Contributors . | | | | | | | . ",
    "url": "/ARCADE/#about-the-project",
    
    "relUrl": "/#about-the-project"
  },"53": {
    "doc": "Overview",
    "title": "Overview",
    "content": " ",
    "url": "/ARCADE/",
    
    "relUrl": "/"
  },"54": {
    "doc": "Lattice layers",
    "title": "Lattice layers",
    "content": "All environmental quantities are defined in layers. Layers are shared between all cell agents. &lt;set&gt; &lt;!-- Simulation set --&gt; &lt;series&gt; &lt;!-- Simulation series --&gt; &lt;patch&gt; &lt;!-- Patch implementation setup --&gt; &lt;/patch&gt; &lt;potts&gt; &lt;!-- Potts implementation setup --&gt; &lt;/potts&gt; &lt;populations&gt; &lt;!-- Setup for agent populations --&gt; &lt;/populations&gt; &lt;actions&gt; &lt;!-- Setup for agent actions --&gt; &lt;/actions&gt; . &lt;layers&gt; &lt;!-- Setup for environment layers --&gt; &lt;/layers&gt; . &lt;components&gt; &lt;!-- Setup for environment components --&gt; &lt;/components&gt; &lt;/series&gt; &lt;/set&gt; . ",
    "url": "/ARCADE/setup/lattice_layers.html",
    
    "relUrl": "/setup/lattice_layers.html"
  },"55": {
    "doc": "Patch lattice layers",
    "title": "Patch lattice layers",
    "content": " ",
    "url": "/ARCADE/setup/lattice_layers_patch.html",
    
    "relUrl": "/setup/lattice_layers_patch.html"
  },"56": {
    "doc": "Patch lattice layers",
    "title": "Table of Contents",
    "content": ". | Layer initialization . | Example: Initializing one lattice layer | Example: Initializing two lattice layers | . | Layer parameters . | Example: Modifying layer parameters | Example: Modifying layer operation parameters | . | Quantity operations . | Example: Including operation versions | . | . The layer tag defines a single layer. Nested tags include layer.parameter for parameters and layer.operation for operations. &lt;layers&gt; &lt;layer id=\"[ID]\"&gt; &lt;layer.parameter id=\"[ID]\" value=\"[VALUE]\" scale=\"[SCALE]\" /&gt; &lt;layer.parameter id=\"[ID]\" value=\"[VALUE]\" scale=\"[SCALE]\" operation=\"[OPERATION]\" /&gt; &lt;layer.operation id=\"[ID]\" /&gt; ... &lt;/layer&gt; ... &lt;/layers&gt; . ",
    "url": "/ARCADE/setup/lattice_layers_patch.html#table-of-contents",
    
    "relUrl": "/setup/lattice_layers_patch.html#table-of-contents"
  },"57": {
    "doc": "Patch lattice layers",
    "title": "Layer initialization",
    "content": "The layer tag initialization are used to initialize the layer. | Each layer must have a unique id | . | ATTRIBUTE | DESCRIPTION | TYPE | REQUIRED | . | id | unique name for the layer | string | Y | . Example: Initializing one lattice layer . Specifies a lattice layer, A. &lt;layers&gt; &lt;layer id=\"A\" /&gt; &lt;/layers&gt; . Example: Initializing two lattice layers . Specifies two lattice layers, A and B. &lt;layers&gt; &lt;layer id=\"A\" /&gt; &lt;layer id=\"B\" /&gt; &lt;/layers&gt; . ",
    "url": "/ARCADE/setup/lattice_layers_patch.html#layer-initialization",
    
    "relUrl": "/setup/lattice_layers_patch.html#layer-initialization"
  },"58": {
    "doc": "Patch lattice layers",
    "title": "Layer parameters",
    "content": "The layer.parameter tag defines layer parameters. Unless modified, default values are used for all parameters. Defaults are listed in parameter.patch.xml. | Either or both value and scale attributes can be applied, with value applied first | Only numeric parameters can be modified using scale | Changes for parameters specific to a operation can be applied to using the operation attribute | . | ATTRIBUTE | DESCRIPTION | . | id | parameter name | . | value | new parameter value | . | scale | scaling factor applied to parameter value | . | operation | operation the parameter belongs to | . Example: Modifying layer parameters . The initial concentration parameter is set to the new value 2000. &lt;layer.parameter id=\"INITIAL_CONCENTRATION\" value=\"2000\" /&gt; . The default value of the initial concentration parameter is scaled by 2. &lt;layer.parameter id=\"INITIAL_CONCENTRATION\" scale=\"2\" /&gt; . The initial concentration parameter is set to the new value 10 * 2 = 20. &lt;layer.parameter id=\"INITIAL_CONCENTRATION\" value=\"10\" scale=\"2\" /&gt; . Example: Modifying layer operation parameters . The diffusivity parameter for the diffuser operation is set to the new value 3. &lt;layer.parameter id=\"DIFFUSIVITY\" operation=\"diffuser\" value=\"3\" /&gt; . ",
    "url": "/ARCADE/setup/lattice_layers_patch.html#layer-parameters",
    
    "relUrl": "/setup/lattice_layers_patch.html#layer-parameters"
  },"59": {
    "doc": "Patch lattice layers",
    "title": "Quantity operations",
    "content": "The layer.operation tag lists operations on quantities in the layer. Valid options include: . GENERATOR Operation for generating the quantity in the lattice DIFFUSER Operation for diffusing the quantity in the lattice | ATTRIBUTE | DESCRIPTION | . | id | operation option id | . To modify operation parameters, use the layer.parameter tag with the corresponding operation attribute. Example: Including operation versions . Specifies a layer with generator and diffuser operations. &lt;layer.operation id=\"GENERATOR\" /&gt; &lt;layer.operation id=\"DIFFUSER\" /&gt; . ",
    "url": "/ARCADE/setup/lattice_layers_patch.html#quantity-operations",
    
    "relUrl": "/setup/lattice_layers_patch.html#quantity-operations"
  },"60": {
    "doc": "Potts lattice layers",
    "title": "Potts lattice layers",
    "content": "Layers are not defined for the potts implementation. Using the layers tag in a potts setup file will cause an error. ",
    "url": "/ARCADE/setup/lattice_layers_potts.html",
    
    "relUrl": "/setup/lattice_layers_potts.html"
  },"61": {
    "doc": "Publications",
    "title": "Publications",
    "content": " ",
    "url": "/ARCADE/publications.html",
    
    "relUrl": "/publications.html"
  },"62": {
    "doc": "Publications",
    "title": "4D hybrid model interrogates agent-level rules and parameters driving hiPS cell colony dynamics",
    "content": "JS Yu, B Lyons, SM Rafelski, JA Theriot, N Bagheri, GT Johnson. bioRxiv. DOI: 10.1101/2024.08.12.607546 . Iterating between data-driven research and generative computational models is a powerful approach for emulating biological systems, testing hypotheses, and gaining a deeper understanding of these systems. We developed a hybrid agent-based model (ABM) that integrates a Cellular Potts Model (CPM) designed to investigate cell shape and colony dynamics in human induced pluripotent stem cell (hiPS cell) colonies. This model aimed to first mimic and then explore the dynamics observed in real-world hiPS cell cultures. Initial outputs showed great potential, seeming to mimic small colony behaviors relatively well. However, longer simulations and quantitative comparisons revealed limitations, particularly with the CPM component, which lacked long-range interactions that might be necessary for accurate simulations. This challenge led us to thoroughly examine the hybrid modelâs potential and limitations, providing insights and recommendations for systems where cell-wide mechanics play significant roles. The CPM supports 2D and 3D cell shapes using a Monte Carlo algorithm to prevent cell fragmentation. Basic âout of the boxâ CPM Hamiltonian terms of volume and adhesion were insufficient to match live cell imaging of hiPS cell cultures. Adding substrate adhesion resulted in flatter colonies, highlighting the need to consider environmental context in modeling. High-throughput parameter sweeps identified regimes that produced consistent simulated shapes and demonstrated the impact of specific model decisions on emergent dynamics. Full-scale simulations showed that while certain agent rules could form a hiPS cell monolayer in 3D, they could not maintain it over time. Our study underscores that âout of the boxâ 3D CPMs, which do not natively incorporate long-range cell mechanics like elasticity, may be insufficient for accurately simulating hiPS cell and colony dynamics. To address this limitation, future work could add mechanical constraints to the CPM Hamiltonian or integrate global agent rules. Alternatively, replacing the CPM with a methodology that directly represents cell mechanics might be necessary. Documenting and sharing our model development process fosters open team science and supports the broader research community in developing computational models of complex biological systems. | Model release: https://github.com/bagherilab/ARCADE/releases/tag/v3.1.4 | Supporting code: https://github.com/allen-cell-animated/cell-abm-pipeline | . ",
    "url": "/ARCADE/publications.html#4d-hybrid-model-interrogates-agent-level-rules-and-parameters-driving-hips-cell-colony-dynamics",
    
    "relUrl": "/publications.html#4d-hybrid-model-interrogates-agent-level-rules-and-parameters-driving-hips-cell-colony-dynamics"
  },"63": {
    "doc": "Publications",
    "title": "Incorporating temporal information during feature engineering bolsters emulation of spatio-temporal emergence",
    "content": "JY Cain, JI Evarts, JS Yu, N Bagheri. Bioinformatics. DOI: 10.1093/bioinformatics/btae131 . Emergent biological dynamics derive from the evolution of lower-level spatial and temporal processes. A long-standing challenge for scientists and engineers is identifying simple low-level rules that give rise to complex higher-level dynamics. High-resolution biological data acquisition enables this identification and has evolved at a rapid pace for both experimental and computational approaches. Simultaneously harnessing the resolution and managing the expense of emerging technologiesâe.g. live cell imaging, scRNAseq, agent-based modelsârequires a deeper understanding of how spatial and temporal axes impact biological systems. Effective emulation is a promising solution to manage the expense of increasingly complex high-resolution computational models. In this research, we focus on the emulation of a tumor microenvironment agent-based model to examine the relationship between spatial and temporal environment features, and emergent tumor properties. Despite significant feature engineering, we find limited predictive capacity of tumor properties from initial system representations. However, incorporating temporal information derived from intermediate simulation states dramatically improves the predictive performance of machine learning models. We train a deep-learning emulator on intermediate simulation states and observe promising enhancements over emulators trained solely on initial conditions. Our results underscore the importance of incorporating temporal information in the evaluation of spatio-temporal emergent behavior. Nevertheless, the emulators exhibit inconsistent performance, suggesting that the underlying model characterizes unique cell populations dynamics that are not easily replaced. | Model release: https://github.com/bagherilab/ARCADE/releases/tag/v2.4 | Supporting code: https://github.com/bagherilab/emulation | . ",
    "url": "/ARCADE/publications.html#incorporating-temporal-information-during-feature-engineering-bolsters-emulation-of-spatio-temporal-emergence",
    
    "relUrl": "/publications.html#incorporating-temporal-information-during-feature-engineering-bolsters-emulation-of-spatio-temporal-emergence"
  },"64": {
    "doc": "Publications",
    "title": "Model design choices impact biological insight: Unpacking the broad landscape of spatial-temporal model development decisions",
    "content": "JS Yu, N Bagheri. PLOS Computational Biology. DOI: 10.1371/journal.pcbi.1011917 . Computational models enable scientists to understand observed dynamics, uncover rules underlying behaviors, predict experimental outcomes, and generate new hypotheses. There are countless modeling approaches that can be used to characterize biological systems, further multiplied when accounting for the variety of model design choices. Many studies focus on the impact of model parameters on model output and performance; fewer studies investigate the impact of model design choices on biological insight. Here we demonstrate why model design choices should be deliberate and intentional in context of the specific research system and question. In this study, we analyze agnostic and broadly applicable modeling choices at three levelsâsystem, cell, and environmentâwithin the same agent-based modeling framework to interrogate their impact on temporal, spatial, and single-cell emergent dynamics. We identify key considerations when making these modeling choices, including the (i) differences between qualitative vs. quantitative results driven by choices in system representation, (ii) impact of cell-to-cell variability choices on cell-level and temporal trends, and (iii) relationship between emergent outcomes and choices of nutrient dynamics in the environment. This generalizable investigation can help guide the choices made when developing biological models that aim to characterize spatial-temporal dynamics. | Model release: https://github.com/bagherilab/ARCADE/releases/tag/v2.4 | Supporting code: https://github.com/bagherilab/arcade_modeling_choices | . ",
    "url": "/ARCADE/publications.html#model-design-choices-impact-biological-insight-unpacking-the-broad-landscape-of-spatial-temporal-model-development-decisions",
    
    "relUrl": "/publications.html#model-design-choices-impact-biological-insight-unpacking-the-broad-landscape-of-spatial-temporal-model-development-decisions"
  },"65": {
    "doc": "Publications",
    "title": "Mapping CAR T-cell design space using agent-based models",
    "content": "AN Prybutok, JS Yu, JN Leonard, N Bagheri. Frontiers in Molecular Biosciences. DOI: 10.3389/fmolb.2022.849363 . Chimeric antigen receptor (CAR) T-cell therapy shows promise for treating liquid cancers and increasingly for solid tumors as well. While potential design strategies exist to address translational challenges, including the lack of unique tumor antigens and the presence of an immunosuppressive tumor microenvironment, testing all possible design choices in vitro and in vivo is prohibitively expensive, time consuming, and laborious. To address this gap, we extended the modeling framework ARCADE (Agent-based Representation of Cells And Dynamic Environments) to include CAR T-cell agents (CAR T-cell ARCADE, or CARCADE). We conducted in silico experiments to investigate how clinically relevant design choices and inherent tumor featuresâCAR T-cell dose, CD4+:CD8+ CAR T-cell ratio, CAR-antigen affinity, cancer and healthy cell antigen expressionâindividually and collectively impact treatment outcomes. Our analysis revealed that tuning CAR affinity modulates IL-2 production by balancing CAR T-cell proliferation and effector function. It also identified a novel multi-feature tuned treatment strategy for balancing selectivity and efficacy and provided insights into how spatial effects can impact relative treatment performance in different contexts. CARCADE facilitates deeper biological understanding of treatment design and could ultimately enable identification of promising treatment strategies to accelerate solid tumor CAR T-cell design-build-test cycles. | Model release: https://github.com/bagherilab/CARCADE | Supporting code: https://github.com/bagherilab/carcade_mapping_design_space | . ",
    "url": "/ARCADE/publications.html#mapping-car-t-cell-design-space-using-agent-based-models",
    
    "relUrl": "/publications.html#mapping-car-t-cell-design-space-using-agent-based-models"
  },"66": {
    "doc": "Publications",
    "title": "Modular microenvironment components reproduce vascular dynamics de novo in a multi-scale agent-based model",
    "content": "JS Yu, N Bagheri. Cell Systems. DOI: 10.1016/j.cels.2021.05.007 . Cells do not exist in isolation; they continuously act within and react to their environment. And this environment is not static; it continuously adapts and responds to cells. Here, we investigate how vascular structure and function impact emergent cell population behavior using an agent-based model (ABM). Our ABM enables researchers to âmix and matchâ cell agents, subcellular modules, and microenvironment components ranging from simple nutrient sources to complex, realistic vascular architectures that accurately capture hemodynamics. We use this ABM to highlight the bilateral relationship between cells and nearby vasculature, demonstrate the effect of vascular structure on environmental heterogeneity, and emphasize the non-linear, non-intuitive relationship between vascular function and the behavior of cell populations over time. Our ABM is well suited to characterizing in vitro and in vivo studies, with applications from basic science to translational synthetic biology and medicine. | Model release: https://github.com/bagherilab/ARCADE/releases/tag/v2.3 | Supporting code: https://github.com/bagherilab/arcade_vascular_dynamics | . ",
    "url": "/ARCADE/publications.html#modular-microenvironment-components-reproduce-vascular-dynamics-de-novo-in-a-multi-scale-agent-based-model",
    
    "relUrl": "/publications.html#modular-microenvironment-components-reproduce-vascular-dynamics-de-novo-in-a-multi-scale-agent-based-model"
  },"67": {
    "doc": "Publications",
    "title": "Agent-based models predict emergent behavior of heterogeneous cell populations in dynamic microenvironments",
    "content": "JS Yu, N Bagheri. Frontiers in Bioengineering and Biotechnology. DOI: 10.3389/fbioe.2020.00249 . Computational models are most impactful when they explain and characterize biological phenomena that are non-intuitive, unexpected, or difficult to study experimentally. Countless equation-based models have been built for these purposes, but we have yet to realize the extent to which rules-based models offer an intuitive framework that encourages computational and experimental collaboration. We develop ARCADE, a multi-scale agent-based model to interrogate emergent behavior of heterogeneous cell agents within dynamic microenvironments and demonstrate how complexity of intracellular metabolism and signaling modules impacts emergent dynamics. We perform in silico case studies on context, competition, and heterogeneity to demonstrate the utility of our model for gaining computational and experimental insight. Notably, there exist (i) differences in emergent behavior between colony and tissue contexts, (ii) linear, non-linear, and multimodal consequences of parameter variation on competition in simulated co-cultures, and (iii) variable impact of cell and population heterogeneity on emergent outcomes. Our extensible framework is easily modified to explore numerous biological systems, from tumor microenvironments to microbiomes. | Model release: https://github.com/bagherilab/ARCADE/releases/tag/v2.2 | Supporting code: https://github.com/bagherilab/arcade_emergent_behavior | . ",
    "url": "/ARCADE/publications.html#agent-based-models-predict-emergent-behavior-of-heterogeneous-cell-populations-in-dynamic-microenvironments",
    
    "relUrl": "/publications.html#agent-based-models-predict-emergent-behavior-of-heterogeneous-cell-populations-in-dynamic-microenvironments"
  },"68": {
    "doc": "Simulation set and series",
    "title": "Simulation set and series",
    "content": "Each setup file corresponds to a single simulation set. Each simulation set can have one or more simulation series, which differ only in random seed. &lt;set&gt; &lt;!-- Simulation set --&gt; &lt;series&gt; &lt;!-- Simulation series --&gt; . &lt;patch&gt; &lt;!-- Patch implementation setup --&gt; &lt;/patch&gt; &lt;potts&gt; &lt;!-- Potts implementation setup --&gt; &lt;/potts&gt; &lt;populations&gt; &lt;!-- Setup for agent populations --&gt; &lt;/populations&gt; &lt;actions&gt; &lt;!-- Setup for agent actions --&gt; &lt;/actions&gt; &lt;layers&gt; &lt;!-- Setup for environment layers --&gt; &lt;/layers&gt; &lt;components&gt; &lt;!-- Setup for environment components --&gt; &lt;/components&gt; . &lt;/series&gt; &lt;/set&gt; . ",
    "url": "/ARCADE/setup/set_and_series.html",
    
    "relUrl": "/setup/set_and_series.html"
  },"69": {
    "doc": "Patch simulations",
    "title": "Patch simulation set and series",
    "content": "A group of simulation series is called a set. A setup file can only contain one set. A simulation series is a group of simulations that only differ in the random seed. Each series includes additional tags that define various parts of the series. A set can include multiple series tags. &lt;set prefix=\"[PREFIX]\"&gt; &lt;series name=\"[NAME]\" start=\"[START]\" end=\"[END]\" radius=\"[RADIUS]\" depth=\"[DEPTH]\" margin=\"[MARGIN]\" ticks=\"[TICKS]\" interval=\"[INTERVAL]\"&gt; ... &lt;/series&gt; &lt;/set&gt; . | ATTRIBUTE | DESCRIPTION | TYPE | DEFAULT | . | prefix | prefix for all series names | string | ââ | . | name | name of the simulation series for output files | string | Â  | . | start | starting random seed | integer | 0 | . | end | ending random seed | integer | 0 | . | radius | radius of the simulation environment | integer | 1 | . | depth | depth of the simulation environment | integer | 1 | . | margin | simulation environment margin | integer | 0 | . | ticks | total number of simulation ticks | integer | 100 | . | interval | number of ticks between snapshots | integer | 50 | . The radius and depth attributes are converted to length, width, and height based on the simulation geometry. Values for radius and margin must be even and depth must be odd; if not, given values will be rounded to the nearest even or odd value. Spatial scaling ds and dz are automatically set based on simulation geometry. Temporal scaling dt is assumed to be 1 min/tick. Example: Set with single series . Specifies a simulation set with one simulation series. Series A is simulated with random seeds 0, 1, 2. &lt;set prefix=\"SET_\"&gt; &lt;series name=\"A\" start=\"0\" end=\"2\"&gt; &lt;!-- Simulation series produces outputs: SET_A_0000, SET_A_0001, SET_A_0002 --&gt; &lt;/series&gt; &lt;/set&gt; . Example: Set with multiple series . Specifies a simulation set with three simulation series. Series A is simulated with random seeds 0, 1, 2. Series B is simulated with random seed 2. Series C is simulated with random seeds 1 and 2. &lt;set prefix=\"SET_\"&gt; &lt;series name=\"A\" start=\"0\" end=\"2\"&gt; &lt;!-- Simulation series produces outputs: SET_A_0000, SET_A_0001, SET_A_0002 --&gt; &lt;/series&gt; &lt;series name=\"B\" start=\"2\" end=\"2\"&gt; &lt;!-- Simulation series produces outputs: SET_B_0002 --&gt; &lt;/series&gt; &lt;series name=\"C\" start=\"1\" end=\"2\"&gt; &lt;!-- Simulation series produces outputs: SET_C_0001, SET_C_0002 --&gt; &lt;/series&gt; &lt;/set&gt; . ",
    "url": "/ARCADE/setup/set_and_series_patch.html#patch-simulation-set-and-series",
    
    "relUrl": "/setup/set_and_series_patch.html#patch-simulation-set-and-series"
  },"70": {
    "doc": "Patch simulations",
    "title": "Patch simulations",
    "content": " ",
    "url": "/ARCADE/setup/set_and_series_patch.html",
    
    "relUrl": "/setup/set_and_series_patch.html"
  },"71": {
    "doc": "Potts simulations",
    "title": "Potts simulation set and series",
    "content": "A group of simulation series is called a set. A setup file can only contain one set. A simulation series is a group of simulations that only differ in the random seed. Each series includes additional tags that define various parts of the series. A set can include multiple series tags. &lt;set prefix=\"[PREFIX]\"&gt; &lt;series name=\"[NAME]\" start=\"[START]\" end=\"[END]\" ds=\"[DS]\" margin=\"[MARGIN]\" length=\"[LENGTH]\" width=\"[WIDTH]\" height=\"[HEIGHT]\" dt=\"[DT]\" ticks=\"[TICKS]\" interval=\"[INTERVAL]\"&gt; ... &lt;/series&gt; &lt;/set&gt; . | ATTRIBUTE | DESCRIPTION | TYPE | DEFAULT | . | prefix | prefix for all series names | string | ââ | . | name | name of the simulation series for output files | string | Â  | . | start | starting random seed | integer | 0 | . | end | ending random seed | integer | 0 | . | ds | spatial conversion factor (um/voxel) | integer, float, fraction | 1 | . | margin | initialization boundary margin | integer | 0 | . | length | x size of the simulation environment | integer | 100 | . | width | y size of the simulation environment | integer | 100 | . | height | z size of the simulation environment | integer | 1 | . | dt | temporal conversion factor (hrs/tick) | integer, float, fraction | 1 | . | ticks | total number of simulation ticks | integer | 100 | . | interval | number of ticks between snapshots | integer | 50 | . If height = 1, the simulation uses 2D rules. If height &gt; 1, the simulation uses 3D rules. Note that the environment grid assumes a one-voxel border in each direction (except in the z direction in a 2D simulation). For 2D simulations, length and width must be at least 3 for valid simulations. For 3D simulations, length, width, and height must be at least 3 for valid simulations. The initialization margin defines the number of voxels in the x and y directions that are not used when initializing cells. Example: Set with single series . Specifies a simulation set with one simulation series. Series A is simulated with random seeds 0, 1, 2. &lt;set prefix=\"SET_\"&gt; &lt;series name=\"A\" start=\"0\" end=\"2\"&gt; &lt;!-- Simulation series produces outputs: SET_A_0000, SET_A_0001, SET_A_0002 --&gt; &lt;/series&gt; &lt;/set&gt; . Example: Set with multiple series . Specifies a simulation set with three simulation series. Series A is simulated with random seeds 0, 1, 2. Series B is simulated with random seed 2. Series C is simulated with random seeds 1 and 2. &lt;set prefix=\"SET_\"&gt; &lt;series name=\"A\" start=\"0\" end=\"2\"&gt; &lt;!-- Simulation series produces outputs: SET_A_0000, SET_A_0001, SET_A_0002 --&gt; &lt;/series&gt; &lt;series name=\"B\" start=\"2\" end=\"2\"&gt; &lt;!-- Simulation series produces outputs: SET_B_0002 --&gt; &lt;/series&gt; &lt;series name=\"C\" start=\"1\" end=\"2\"&gt; &lt;!-- Simulation series produces outputs: SET_C_0001, SET_C_0002 --&gt; &lt;/series&gt; &lt;/set&gt; . ",
    "url": "/ARCADE/setup/set_and_series_potts.html#potts-simulation-set-and-series",
    
    "relUrl": "/setup/set_and_series_potts.html#potts-simulation-set-and-series"
  },"72": {
    "doc": "Potts simulations",
    "title": "Potts simulations",
    "content": " ",
    "url": "/ARCADE/setup/set_and_series_potts.html",
    
    "relUrl": "/setup/set_and_series_potts.html"
  }
}
